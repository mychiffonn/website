---
import type { MarkdownHeading } from "astro"

import { tocUtils } from "@/lib/blog"
import { cn } from "@/lib/utils"
import Icon from "@/components/base/Icon.astro"
import TOCHeadingLink from "@/components/blog/TOCHeadingLink.astro"
import { ScrollArea } from "@/components/ui/scroll-area"

interface Props {
  headings: MarkdownHeading[]
}

const { headings } = Astro.props
const hasHeadings = headings && headings.length > 0
---

{
  hasHeadings && (
    <nav
      id="mobile-toc-container"
      class="w-full xl:hidden"
      role="navigation"
      aria-label="Table of contents"
    >
      <details class="group overflow-x-hidden" role="button" aria-expanded="false">
        <summary
          class={cn(
            "focus-visible:ring-ring focus-visible:ring-2 focus-visible:ring-offset-2 focus-visible:outline-none",
            "mx-auto flex min-w-0 flex-1 cursor-pointer items-start gap-3 px-4 py-3"
          )}
        >
          <div
            class="relative flex flex-shrink-0 items-center justify-center"
            role="img"
            aria-label="Reading progress indicator"
          >
            <svg class="h-5 w-5" viewBox="0 0 24 24" aria-hidden="true">
              <circle
                class="text-primary/20"
                cx="12"
                cy="12"
                r="10"
                fill="none"
                stroke="currentColor"
                stroke-width="2"
              />
              <circle
                id="mobile-toc-progress-circle"
                class="text-primary"
                cx="12"
                cy="12"
                r="10"
                fill="none"
                stroke="currentColor"
                stroke-width="2"
                stroke-dasharray="62.83"
                stroke-dashoffset="62.83"
                transform="rotate(-90 12 12)"
              />
            </svg>
          </div>
          <span
            id="mobile-toc-current-section"
            class="text-foreground min-w-0 truncate text-sm leading-tight font-medium"
          >
            Overview
          </span>
          <Icon
            name="mingcute:down-line"
            class="text-muted-foreground ml-auto flex-shrink-0 transition-transform duration-200 group-open:rotate-180"
            aria-hidden="true"
          />
        </summary>

        <div class="border-border/50 mx-auto max-w-3xl border-t" data-scroll-container>
          <ScrollArea
            client:load
            className="flex max-h-[30vh] flex-col overflow-y-auto"
            data-scroll-area
          >
            <nav aria-labelledby="mobile-toc-heading" class="px-3 py-2">
              <span id="mobile-toc-heading" class="sr-only">
                Table of Contents
              </span>
              <ul class="flex list-none flex-col gap-y-1" id="mobile-toc" role="list">
                {headings.map((heading) => (
                  <TOCHeadingLink
                    heading={heading}
                    href={`#${heading.slug}`}
                    class={cn("text-foreground/70", tocUtils.getHeadingMargin(heading.depth))}
                  />
                ))}
              </ul>
            </nav>
          </ScrollArea>
        </div>
      </details>
    </nav>
  )
}

<script>
  import { SITE } from "@site-config"
  import { BaseTOCController, MobileTOCUtils } from "@/lib/blog/scroll"

  // Mobile TOC Controller - extends BaseTOCController with mobile-specific features
  class MobileTOCController extends BaseTOCController {
    private static instance: MobileTOCController | null = null
    private markdownHeadings: Array<{ slug: string; text: string; depth: number }> | null = null

    private progressCircle: SVGCircleElement | null = null
    private currentSectionText: HTMLElement | null = null
    private detailsElement: HTMLDetailsElement | null = null
    private progressScrollHandler: (() => void) | null = null

    static getInstance(): MobileTOCController {
      return (this.instance ??= new MobileTOCController())
    }

    static resetInstance(): void {
      this.instance?.cleanup()
      this.instance = null
    }

    getContainerSelector() {
      return "#mobile-toc-container"
    }

    getLinkSelector() {
      return "#mobile-toc-container .toc-item"
    }

    protected setupCustomBehavior() {
      // Extract headings with maxDepth from config
      this.markdownHeadings = MobileTOCUtils.extractMarkdownHeadings(
        "#mobile-toc",
        SITE.tocMaxDepth
      )

      this.setupMobileElements()
      this.setupInteraction()
      this.setupProgressHandler()

      // Initial updates
      MobileTOCUtils.updateProgress(this.progressCircle)
      MobileTOCUtils.updateCurrentSection(
        this.currentSectionText,
        this.state.activeIds,
        this.markdownHeadings
      )
    }

    cleanup() {
      if (this.progressScrollHandler) {
        window.removeEventListener("scroll", this.progressScrollHandler)
        this.progressScrollHandler = null
      }
      super.cleanup()
    }

    private setupMobileElements() {
      this.progressCircle = document.querySelector<SVGCircleElement>("#mobile-toc-progress-circle")
      this.currentSectionText = document.getElementById("mobile-toc-current-section")
      this.detailsElement = document.querySelector<HTMLDetailsElement>(
        "#mobile-toc-container details"
      )

      // Initialize progress circle
      MobileTOCUtils.initProgressCircle(this.progressCircle)
    }

    private setupInteraction() {
      // Setup standard interactions
      MobileTOCUtils.setupInteractions("#mobile-toc", this.detailsElement)

      // Scroll to active item when details opens
      this.detailsElement?.addEventListener("toggle", () => {
        const activeId = this.state.activeIds?.[0]
        if (this.detailsElement?.open && activeId) {
          requestAnimationFrame(() => {
            this.tocLinks.scrollToActive(activeId)
          })
        }
      })
    }

    private setupProgressHandler() {
      this.progressScrollHandler = () => {
        MobileTOCUtils.updateProgress(this.progressCircle)
        MobileTOCUtils.updateCurrentSection(
          this.currentSectionText,
          this.state.activeIds,
          this.markdownHeadings
        )
      }
      window.addEventListener("scroll", this.progressScrollHandler, { passive: true })
    }
  }

  // Initialize controller
  const controller = MobileTOCController.getInstance()

  document.addEventListener("astro:page-load", () => controller.init())
  document.addEventListener("astro:after-swap", () => {
    MobileTOCController.resetInstance()
    MobileTOCController.getInstance().init()
  })
  document.addEventListener("astro:before-swap", () => MobileTOCController.resetInstance())
</script>
