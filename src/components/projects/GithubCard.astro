---
interface Props {
  repo: string
}

const { repo: repoRaw } = Astro.props

// Remove 'https://github.com/' headings from the repo string
const repo = repoRaw.replace(/^https:\/\/github\.com\//, "")

const [owner, repoName] = repo.split("/")
---

<github-card class="not-prose loading" data-repo={repo}>
  <a
    href={`https://github.com/${repo}`}
    target="_blank"
    class="group hover:bg-muted hover:text-muted-foreground flex flex-col gap-y-2 rounded-xl border px-5 py-4 transition-colors"
  >
    <div class="flex items-center justify-between">
      <div class="text-foreground group-hover:text-primary flex items-center gap-x-2">
        <div id="gh-avatar" class="gh-text me-2 size-8 bg-cover" style="border-radius:999px"></div>
        <span class="text-lg transition-colors">{owner}</span>
        <span class="text-muted-foreground">/</span>
        <span class="text-lg font-bold transition-colors">{repoName}</span>
      </div>
      <div class="bg-primary-foreground rounded-full p-1">
        <span class="mingcute:github-line"></span>
      </div>
    </div>
    <p id="gh-description" class="gh-text">Waiting for api.github.com...</p>
    <div class="flex items-center justify-between">
      <div class="gh-text flex flex-wrap items-center gap-x-5">
        <div class="flex items-center gap-x-2">
          <span class="mingcute:star-line leading-tight" id="gh-stars"></span>
        </div>

        <div class="flex items-center gap-x-2">
          <svg xmlns="http://www.w3.org/2000/svg" width="22" height="22" viewBox="0 0 24 24"
            ><g fill="none"
              ><path
                d="m12.593 23.258l-.011.002l-.071.035l-.02.004l-.014-.004l-.071-.035q-.016-.005-.024.005l-.004.01l-.017.428l.005.02l.01.013l.104.074l.015.004l.012-.004l.104-.074l.012-.016l.004-.017l-.017-.427q-.004-.016-.017-.018m.265-.113l-.013.002l-.185.093l-.01.01l-.003.011l.018.43l.005.012l.008.007l.201.093q.019.005.029-.008l.004-.014l-.034-.614q-.005-.018-.02-.022m-.715.002a.02.02 0 0 0-.027.006l-.006.014l-.034.614q.001.018.017.024l.015-.002l.201-.093l.01-.008l.004-.011l.017-.43l-.003-.012l-.01-.01z"
              ></path><path
                fill="currentColor"
                d="M18 3a3 3 0 0 1 1 5.83V9a4 4 0 0 1-4 4H9a2 2 0 0 0-2 2v.17a3.001 3.001 0 1 1-2 0V8.83a3.001 3.001 0 1 1 2 0v2.705A4 4 0 0 1 9 11h6a2 2 0 0 0 2-2v-.17A3.001 3.001 0 0 1 18 3M6 17a1 1 0 1 0 0 2a1 1 0 0 0 0-2M6 5a1 1 0 1 0 0 2a1 1 0 0 0 0-2m12 0a1 1 0 1 0 0 2a1 1 0 0 0 0-2"
              ></path></g
            ></svg
          >
          <span id="gh-forks" class="leading-tight">???</span>
        </div>

        <div class="flex items-center gap-x-2">
          <span id="gh-license" class="mingcute:balance-line leading-tight">???</span>
        </div>
      </div>
      <span id="gh-language" class="gh-text leading-tight">?????</span>
    </div>
  </a>
</github-card>

<style>
  @keyframes pulsate {
    0% {
      opacity: 1;
    }
    50% {
      opacity: 0.4;
    }
    to {
      opacity: 1;
    }
  }
  .loading .gh-text {
    color: transparent;
    border-radius: calc(var(--radius) - 3px);
    background-color: hsl(var(--primary-foreground) / var(--un-text-opacity));
    animation: pulsate 2s infinite linear;
    user-select: none;
  }
  .loading .gh-text:nth-child(2) {
    animation-delay: 1s;
  }
</style>

<script>
  interface GithubProps {
    stargazers_count: number
    forks: number
    language: string
    owner: { avatar_url: string }
    license?: { spdx_id: string }
    description: string
  }

  class GithubCard extends HTMLElement {
    async fetchGithub(repo: string): Promise<GithubProps | null> {
      try {
        const res = await fetch(`https://api.github.com/repos/${repo}`, {
          referrerPolicy: "no-referrer"
        })
        if (!res.ok) {
          throw new Error(`HTTP error! status: ${res.status}`)
        }
        return (await res.json()) as GithubProps
      } catch (e) {
        console.error("Failed to fetch Github data:", e)
        return null
      }
    }

    numberFormat(value: number): string {
      return Intl.NumberFormat("en-us", {
        notation: "compact",
        maximumFractionDigits: 1
      }).format(value)
    }

    async connectedCallback() {
      if (!this.dataset.repo) return
      try {
        const data = await this.fetchGithub(this.dataset.repo)
        if (!data) return
        ;(this.querySelector("#gh-stars") as HTMLElement).textContent = this.numberFormat(
          data.stargazers_count
        )
        ;(this.querySelector("#gh-forks") as HTMLElement).textContent = this.numberFormat(
          data.forks
        )
        ;(this.querySelector("#gh-language") as HTMLElement).textContent = data.language || "N/A"
        ;(this.querySelector("#gh-description") as HTMLElement).textContent =
          typeof data.description === "string"
            ? data.description.replace(/:[a-zA-Z0-9_]+:/g, "")
            : "Description not set"

        const licenseEl = this.querySelector("#gh-license") as HTMLElement
        if (data.license?.spdx_id) {
          licenseEl.textContent = data.license.spdx_id
        } else {
          licenseEl.classList.add("no-license")
        }

        const avatarEl = this.querySelector("#gh-avatar") as HTMLElement
        if (avatarEl) {
          avatarEl.style.backgroundImage = `url(${data.owner.avatar_url})`
          avatarEl.style.backgroundColor = "transparent"
        }

        this.classList.remove("loading")
      } catch (e) {
        console.error("Error setting Github data:", e)
        ;(this.querySelector("#gh-description") as HTMLElement).textContent = "Failed to fetch data"
      }
    }
  }

  customElements.define("github-card", GithubCard)
</script>
