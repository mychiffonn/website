---
import type { CollectionEntry } from "astro:content"

import { getContextVariant, getProjectDescription, getProjectLinks } from "@/lib/projects"
import { cn, createDateRange } from "@/lib/utils"
import Badge from "@/components/base/Badge.astro"
import Button from "@/components/base/Button.astro"
import Icon from "@/components/base/Icon.astro"

import "@/styles/card.css"

interface Props {
  project: CollectionEntry<"projects">
}

const { project } = Astro.props
const { title, isHighlighted, fromDate, toDate, repo, doc, url, release, context, tags } =
  project.data

const dateRange = createDateRange(fromDate, toDate)
const links = getProjectLinks(repo, doc, url, release)
const contextVariant = getContextVariant(context)

const descriptionData = getProjectDescription(project)
const hasDetailPage = project.body && project.body.trim().length > 0

const cardClasses = cn(
  "card card-content",
  isHighlighted && "card-selected",
  hasDetailPage && "card-clickable relative group"
)
---

<article class={cardClasses}>
  {
    hasDetailPage && (
      <a
        href={`/projects/${project.id}`}
        class="absolute inset-0 z-10"
        aria-label={`View details for ${title}`}
      />
    )
  }

  <div class="card-header relative">
    {
      isHighlighted && (
        <>
          <Icon name="star" class="text-primary" />
          <span class="sr-only">Featured</span>
        </>
      )
    }
    <h3 class={cn("card-title", !hasDetailPage && "text-muted-foreground")}>{title}</h3>
  </div>

  {/* Context and Date */}
  <div class="card-meta text-muted-foreground relative">
    {
      context && (
        <Badge variant={contextVariant}>{context.charAt(0).toUpperCase() + context.slice(1)}</Badge>
      )
    }
    {dateRange && <time>{dateRange}</time>}
  </div>

  {
    descriptionData && (
      <p class="card-description relative">
        {descriptionData.text}
        {descriptionData.needsReadMore && hasDetailPage && (
          <span class="text-primary ml-1">Read more â†’</span>
        )}
      </p>
    )
  }

  {/* Tags */}
  {
    tags && tags.length > 0 && (
      <div class="card-tags relative">
        {tags.map((tag: string) => (
          <Badge variant="muted" class="text-xs">
            {tag}
          </Badge>
        ))}
      </div>
    )
  }

  {/* Links */}
  {
    links.length > 0 && (
      <div class="card-actions relative z-20">
        {links.map(({ href, icon, label }) => (
          <Button href={href} variant="accent-outline">
            <Icon name={icon} />
            <span>{label}</span>
          </Button>
        ))}
      </div>
    )
  }
</article>
