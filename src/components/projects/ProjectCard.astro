---
import type { CollectionEntry } from "astro:content"

import { getContextVariant, getProjectDescription, getProjectLinks } from "@/lib/projects"
import { createDateRange } from "@/lib/utils"
import Badge from "@/components/base/Badge.astro"
import Icon from "@/components/base/Icon.astro"
import Link from "@/components/base/Link.astro"

import "@/assets/styles/card.css"

interface Props {
  project: CollectionEntry<"projects">
}

const { project } = Astro.props
const { title, isHighlighted, fromDate, toDate, repo, doc, url, release, context, tags } =
  project.data

const dateRange = createDateRange(fromDate, toDate)
const links = getProjectLinks(repo, doc, url, release)
const contextVariant = getContextVariant(context)

const descriptionData = getProjectDescription(project)
const hasDetailPage = project.body && project.body.trim().length > 0
---

<article class:list={["card", isHighlighted && "card-selected"]}>
  <div class="card-content">
    <div class="card-header">
      {
        isHighlighted && (
          <>
            <Icon name="star" class="text-primary" />
            <span class="sr-only">Featured</span>
          </>
        )
      }
      {
        hasDetailPage ? (
          <Link href={`/projects/${project.id}`} class="card-title-link">
            <h3 class="card-title">{title}</h3>
          </Link>
        ) : (
          <h3 class="card-title text-muted-foreground">{title}</h3>
        )
      }
    </div>

    {/* Context and Date */}
    <div class="card-meta text-muted-foreground">
      {
        context && (
          <Badge variant={contextVariant}>
            {context.charAt(0).toUpperCase() + context.slice(1)}
          </Badge>
        )
      }
      {dateRange && <time>{dateRange}</time>}
    </div>

    {
      descriptionData && (
        <p class="card-description">
          {descriptionData.text}
          {descriptionData.needsReadMore && (
            <Link href={`/projects/${project.id}`} class="text-primary ml-1 hover:underline">
              Read more â†’
            </Link>
          )}
        </p>
      )
    }

    {/* Tags */}
    {
      tags && tags.length > 0 && (
        <div class="card-tags">
          {tags.map((tag: string) => (
            <Badge variant="muted" class="text-xs">
              {tag}
            </Badge>
          ))}
        </div>
      )
    }

    {/* Links */}
    {
      links.length > 0 && (
        <div class="card-actions">
          {links.map(({ href, icon, label }) => (
            <Link href={href} external class="card-button">
              <Icon name={icon} />
              <span>{label}</span>
            </Link>
          ))}
        </div>
      )
    }
  </div>
</article>
