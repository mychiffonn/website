---
import { Image, type LocalImageProps, type RemoteImageProps } from "astro:assets"

import { cn } from "@/lib/utils"

type AstroImageProps = LocalImageProps | RemoteImageProps

export interface Props extends Omit<AstroImageProps, "class"> {
  fallback?: string
  "data-slot"?: string
  class?: string
}

const {
  fallback = Astro.props.alt?.charAt(0) || "?",
  "data-slot": dataSlot = "avatar-image",
  class: className,
  ...imageProps
} = Astro.props

// Ensure square dimensions - if width or height is set, use it for both
const squareDimension = imageProps.width || imageProps.height
const finalImageProps = {
  ...imageProps,
  ...(squareDimension && { width: squareDimension, height: squareDimension })
}

// Auto-add inferSize for remote images without dimensions
const isRemoteImage = typeof imageProps.src === "string" && imageProps.src.startsWith("http")
const shouldInferSize =
  isRemoteImage && !imageProps.width && !imageProps.height && !("inferSize" in imageProps)
---

<div class={cn("relative flex shrink-0 overflow-hidden rounded-full", className)}>
  {
    finalImageProps.src && (
      <Image
        {...(finalImageProps as any)}
        {...(shouldInferSize && { inferSize: true })}
        class="aspect-square object-cover object-center"
        data-slot={dataSlot}
        aria-label="Avatar"
      />
    )
  }

  <div
    class={cn(
      "bg-muted flex size-full items-center justify-center",
      "text-foreground font-medium uppercase",
      !!finalImageProps.src && "hidden"
    )}
    data-slot="avatar-fallback"
    style="font-size: clamp(0.5rem, 25%, 1.5rem)"
  >
    <slot name="fallback">
      {fallback}
    </slot>
  </div>
</div>
