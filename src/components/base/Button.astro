---
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

import Link from "./Link.astro"

const buttonVariants = cva(
  [
    // Base layout & display
    "inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md",

    // Typography
    "text-sm font-medium",

    // Base sizing
    "min-h-[44px]",

    // Touch & interaction
    "touch-manipulation transition-all cursor-pointer select-none",

    "transform-gpu will-change-transform",

    // Focus & accessibility
    "focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px]",

    "disabled:pointer-events-none disabled:opacity-50 disabled:cursor-not-allowed",

    "aria-invalid:ring-destructive/20 aria-invalid:border-destructive",
    "dark:aria-invalid:ring-destructive/40"
  ],
  {
    variants: {
      variant: {
        default: [
          "bg-primary text-primary-foreground border-2 border-transparent",
          "hover:text-foreground hover:bg-background hover:border-primary",
          "active:scale-95"
        ],
        destructive: [
          "bg-destructive text-white border-transparent",
          "hover:bg-destructive/90",
          "focus-visible:ring-destructive/20",
          "dark:focus-visible:ring-destructive/40 dark:bg-destructive/60",
          "active:scale-95"
        ],
        outline: [
          "border bg-background",
          "hover:bg-accent hover:text-accent-foreground",
          "dark:bg-input/30 dark:border-input dark:hover:bg-input/50",
          "active:scale-95"
        ],
        ghost: "hover:bg-accent hover:text-accent-foreground active:bg-accent/80"
      },
      size: {
        default: "px-5 py-3",
        square: "aspect-square p-3 gap-0"
      }
    },
    defaultVariants: {
      variant: "default",
      size: "default"
    }
  }
)

export interface Props extends astroHTML.JSX.ButtonHTMLAttributes {
  variant?: VariantProps<typeof buttonVariants>["variant"]
  size?: VariantProps<typeof buttonVariants>["size"]
  href?: string
}

const { variant = "default", size = "default", class: className, href, ...rest } = Astro.props
---

{
  href ? (
    <Link
      href={href}
      data-slot="button"
      class={cn(buttonVariants({ variant, size }), className)}
      {...rest}
    >
      <slot />
    </Link>
  ) : (
    <button
      type="button"
      data-slot="button"
      class={cn(buttonVariants({ variant, size }), className)}
      {...rest}
    >
      <slot />
    </button>
  )
}
