---
import { render, type CollectionEntry } from "astro:content"

import {
  getContextVariant,
  getProjectLinks,
  getProjectsWithContent,
  hasProjectContent
} from "@/lib/projects"
import Layout from "@/layouts/Layout.astro"
import Badge from "@/components/base/Badge.astro"
import Icon from "@/components/base/Icon.astro"
import Breadcrumbs from "@/components/layout/Breadcrumbs.astro"
import DateRange from "@/components/projects/DateRange.astro"

export async function getStaticPaths() {
  // Filter at collection level for better performance
  const projects = await getProjectsWithContent(hasProjectContent)

  return projects.map((project) => ({
    params: { id: project.id },
    props: { project }
  }))
}

type Props = {
  project: CollectionEntry<"projects">
}

const { project } = Astro.props
const { Content } = await render(project)
const { title, isHighlighted, fromDate, toDate, repo, doc, url, release, context, tags } =
  project.data

const links = getProjectLinks(repo, doc, url, release)

const contextVariant = getContextVariant(context)
---

<Layout class="max-w-3xl" title={title} description={`Project details for ${title}`}>
  <Breadcrumbs
    items={[
      { href: "/projects", label: "Projects", icon: "mingcute:folder-line" },
      { label: title, icon: "mingcute:file-line" }
    ]}
  />

  <header class="mb-8 flex flex-col gap-4">
    {/* Title and Highlight */}
    <div class="flex items-start justify-between gap-4">
      <h1 class="text-3xl leading-tight font-bold sm:text-4xl">{title}</h1>
      {
        isHighlighted && (
          <Badge variant="default" class="shrink-0">
            <Icon name="star" class="mr-1 size-3" />
            Featured
          </Badge>
        )
      }
    </div>

    {/* Context and Date */}
    <div class="flex flex-wrap items-center gap-3 text-sm">
      {
        context && (
          <Badge variant={contextVariant}>
            {context.charAt(0).toUpperCase() + context.slice(1)}
          </Badge>
        )
      }
      <DateRange
        fromDate={fromDate}
        toDate={toDate}
        class="text-muted-foreground flex items-center gap-1"
        showIcon={true}
      />
    </div>

    {/* Tags */}
    {
      tags && tags.length > 0 && (
        <div class="flex flex-wrap gap-2">
          {tags.map((tag: string) => (
            <Badge variant="muted" class="text-xs">
              {tag}
            </Badge>
          ))}
        </div>
      )
    }

    {/* Links */}
    {
      links.length > 0 && (
        <div class="flex flex-wrap gap-2">
          {links.map(({ href, icon, label }) => (
            <Button href={href} variant="accent-outline">
              <Icon name={icon} />
              <span>{label}</span>
            </Button>
          ))}
        </div>
      )
    }
  </header>

  <article class="prose lg:prose-lg">
    <Content />
  </article>
</Layout>
