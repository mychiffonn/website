---
import { render, type CollectionEntry } from "astro:content"

import {
  getContextVariant,
  getProjectLinks,
  getProjectsWithContent,
  hasProjectContent
} from "@/lib/projects"
import { createDateRange } from "@/lib/utils"
import Layout from "@/layouts/Layout.astro"
import Badge from "@/components/base/Badge.astro"
import Icon from "@/components/base/Icon.astro"
import Link from "@/components/base/Link.astro"
import Breadcrumbs from "@/components/layout/Breadcrumbs.astro"

export const prerender = true

export async function getStaticPaths() {
  // Filter at collection level for better performance
  const projects = await getProjectsWithContent(hasProjectContent)

  return projects.map((project) => ({
    params: { id: project.id },
    props: { project }
  }))
}

type Props = {
  project: CollectionEntry<"projects">
}

const { project } = Astro.props
const { Content } = await render(project)
const { title, isHighlighted, fromDate, toDate, repo, doc, url, release, context, tags } =
  project.data

const dateRange = createDateRange(fromDate, toDate)
const links = getProjectLinks(repo, doc, url, release)

const contextVariant = getContextVariant(context)
---

<Layout class="max-w-3xl" title={title} description={`Project details for ${title}`}>
  <Breadcrumbs
    items={[
      { href: "/projects", label: "Projects", icon: "folder-open" },
      { label: title, icon: "file" }
    ]}
  />

  <main>
    <article>
      <header class="mb-8">
        <div class="flex flex-col gap-4">
          {/* Title and Highlight */}
          <div class="flex items-start justify-between gap-4">
            <h1 class="text-3xl leading-tight font-bold sm:text-4xl">{title}</h1>
            {
              isHighlighted && (
                <Badge variant="default" class="shrink-0">
                  <Icon name="star" class="mr-1 size-3" />
                  Featured
                </Badge>
              )
            }
          </div>

          {/* Context and Date */}
          <div class="flex flex-wrap items-center gap-3 text-sm">
            {
              context && (
                <Badge variant={contextVariant}>
                  {context.charAt(0).toUpperCase() + context.slice(1)}
                </Badge>
              )
            }
            {
              dateRange && (
                <span class="text-muted-foreground flex items-center gap-1">
                  <Icon name="calendar" class="size-3" />
                  {dateRange}
                </span>
              )
            }
          </div>

          {/* Tags */}
          {
            tags && tags.length > 0 && (
              <div class="flex flex-wrap gap-2">
                {tags.map((tag: string) => (
                  <Badge variant="muted" class="text-xs">
                    {tag}
                  </Badge>
                ))}
              </div>
            )
          }

          {/* Links */}
          {
            links.length > 0 && (
              <div class="flex flex-wrap gap-2">
                {links.map(({ href, icon, label }) => (
                  <Link
                    href={href}
                    external
                    class="border-border hover:bg-accent hover:text-accent-foreground hover:border-accent inline-flex cursor-pointer items-center gap-2 rounded-lg border-2 px-3 py-2 text-sm font-medium no-underline transition-all duration-200"
                  >
                    <Icon name={icon} />
                    <span>{label}</span>
                  </Link>
                ))}
              </div>
            )
          }
        </div>
      </header>

      <div class="prose prose-lg dark:prose-invert max-w-none">
        <Content />
      </div>
    </article>
  </main>
</Layout>
