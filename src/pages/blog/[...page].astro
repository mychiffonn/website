---
import type { PaginateFunction } from "astro"

import { SITE } from "@site-config"
import { PostManager } from "@/lib/blog"
import Layout from "@/layouts/Layout.astro"
import Badge from "@/components/base/Badge.astro"
import Button from "@/components/base/Button.astro"
import Icon from "@/components/base/Icon.astro"
import Pagination from "@/components/base/Pagination.astro"
import PreviewCard from "@/components/blog/PreviewCard.astro"
import Breadcrumbs from "@/components/layout/Breadcrumbs.astro"

export async function getStaticPaths({ paginate }: { paginate: PaginateFunction }) {
  const allPosts = await PostManager.getInstance().getMainPosts()
  return paginate(allPosts, { pageSize: SITE.postsPerPage })
}

const { page } = Astro.props
const postManager = PostManager.getInstance()

// Get posts grouped by year for current page
const currentPagePosts = page.data
const hasNoPosts = currentPagePosts.length === 0

let postsMetadata: Awaited<ReturnType<typeof postManager.getMetadata>>[] = []
let postsByYear: { year: number; posts: typeof postsMetadata }[] = []
let sortedTags: Awaited<ReturnType<typeof postManager.getSortedTags>> = []
let displayTags: typeof sortedTags = []
let numTags = 0
let moreTagsButton = false

if (!hasNoPosts) {
  // Get metadata for all posts in parallel
  postsMetadata = await Promise.all(
    currentPagePosts.map((post) => postManager.getMetadata(post.id))
  )

  // Group metadata by year
  const postsByYearMap = postsMetadata.reduce(
    (acc: Record<number, typeof postsMetadata>, metadata) => {
      const year = metadata.createdAt.getFullYear()
      ;(acc[year] ??= []).push(metadata)
      return acc
    },
    {}
  )

  postsByYear = Object.entries(postsByYearMap)
    .map(([year, posts]) => ({ year: parseInt(year), posts }))
    .sort((a, b) => b.year - a.year)

  sortedTags = await postManager.getSortedTags()
  displayTags = sortedTags.slice(0, 15)
  numTags = sortedTags.length
  moreTagsButton = numTags > 15
}
---

<Layout title="Blog">
  <Breadcrumbs
    slot="breadcrumb"
    items={[
      { label: "Blog", href: "/blog", icon: "blog" },
      { label: `Page ${page.currentPage}`, icon: "copy" }
    ]}
  />

  {
    numTags > 0 && (
      <section class="mb-8">
        <h2 class="mb-4 text-lg font-medium">Browse by Tags</h2>
        <div class="flex flex-col gap-4">
          <div class="flex flex-wrap gap-2">
            {displayTags.map(({ tag, count }) => (
              <Badge href={`/tags/${tag}`} variant="muted">
                <Icon name="hashtag" class="size-3" />
                {tag}
                <span class="text-muted-foreground ml-1">({count})</span>
              </Badge>
            ))}
          </div>
          {moreTagsButton && (
            <div class="flex justify-end">
              <Button href="/tags" variant="outline" class="group">
                <span>View all {sortedTags.length} tags</span>
                <Icon
                  name="arrow-right"
                  class="size-4 transition-transform group-hover:translate-x-0.5"
                />
              </Button>
            </div>
          )}
        </div>
      </section>
    )
  }

  {/** Showing x-x of X posts */}
  {
    !hasNoPosts && (
      <p class="text-muted-foreground text-sm">
        Showing {page.start + 1}-{page.end + 1} of {page.total} posts
      </p>
    )
  }

  <div class="flex min-h-[calc(100vh-18rem)] flex-col gap-y-8">
    {
      hasNoPosts ? (
        <section class="flex flex-col items-center justify-center gap-y-4 text-center">
          <div class="max-w-md">
            <h2 class="mb-4 text-2xl font-medium">No posts yet</h2>
            <p class="text-muted-foreground">Check back later for new content!</p>
          </div>
        </section>
      ) : (
        postsByYear.map(({ year, posts }) => (
          <section class="flex flex-col gap-y-4">
            <div class="font-medium">{year}</div>
            <ul class="flex flex-col gap-4">
              {posts.map((metadata) => (
                <li>
                  <PreviewCard metadata={metadata} />
                </li>
              ))}
            </ul>
          </section>
        ))
      )
    }
  </div>

  <Pagination currentPage={page.currentPage} totalPages={page.lastPage} baseUrl="/blog" />
</Layout>
